# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from low_level_controllers/CmdBundle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CmdBundle(genpy.Message):
  _md5sum = "33dbfa38363ed7f43720a30f635f98c2"
  _type = "low_level_controllers/CmdBundle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 servo1_ang
float32 servo2_ang
float32 servo3_ang
float32 servo4_ang
float32 servo5_ang
float32 servo6_ang
float32 wheel1_ang
float32 wheel1_vel
float32 wheel2_ang
float32 wheel2_vel
float32 wheel3_ang
float32 wheel3_vel
"""
  __slots__ = ['servo1_ang','servo2_ang','servo3_ang','servo4_ang','servo5_ang','servo6_ang','wheel1_ang','wheel1_vel','wheel2_ang','wheel2_vel','wheel3_ang','wheel3_vel']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       servo1_ang,servo2_ang,servo3_ang,servo4_ang,servo5_ang,servo6_ang,wheel1_ang,wheel1_vel,wheel2_ang,wheel2_vel,wheel3_ang,wheel3_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CmdBundle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.servo1_ang is None:
        self.servo1_ang = 0.
      if self.servo2_ang is None:
        self.servo2_ang = 0.
      if self.servo3_ang is None:
        self.servo3_ang = 0.
      if self.servo4_ang is None:
        self.servo4_ang = 0.
      if self.servo5_ang is None:
        self.servo5_ang = 0.
      if self.servo6_ang is None:
        self.servo6_ang = 0.
      if self.wheel1_ang is None:
        self.wheel1_ang = 0.
      if self.wheel1_vel is None:
        self.wheel1_vel = 0.
      if self.wheel2_ang is None:
        self.wheel2_ang = 0.
      if self.wheel2_vel is None:
        self.wheel2_vel = 0.
      if self.wheel3_ang is None:
        self.wheel3_ang = 0.
      if self.wheel3_vel is None:
        self.wheel3_vel = 0.
    else:
      self.servo1_ang = 0.
      self.servo2_ang = 0.
      self.servo3_ang = 0.
      self.servo4_ang = 0.
      self.servo5_ang = 0.
      self.servo6_ang = 0.
      self.wheel1_ang = 0.
      self.wheel1_vel = 0.
      self.wheel2_ang = 0.
      self.wheel2_vel = 0.
      self.wheel3_ang = 0.
      self.wheel3_vel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.servo1_ang, _x.servo2_ang, _x.servo3_ang, _x.servo4_ang, _x.servo5_ang, _x.servo6_ang, _x.wheel1_ang, _x.wheel1_vel, _x.wheel2_ang, _x.wheel2_vel, _x.wheel3_ang, _x.wheel3_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.servo1_ang, _x.servo2_ang, _x.servo3_ang, _x.servo4_ang, _x.servo5_ang, _x.servo6_ang, _x.wheel1_ang, _x.wheel1_vel, _x.wheel2_ang, _x.wheel2_vel, _x.wheel3_ang, _x.wheel3_vel,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.servo1_ang, _x.servo2_ang, _x.servo3_ang, _x.servo4_ang, _x.servo5_ang, _x.servo6_ang, _x.wheel1_ang, _x.wheel1_vel, _x.wheel2_ang, _x.wheel2_vel, _x.wheel3_ang, _x.wheel3_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.servo1_ang, _x.servo2_ang, _x.servo3_ang, _x.servo4_ang, _x.servo5_ang, _x.servo6_ang, _x.wheel1_ang, _x.wheel1_vel, _x.wheel2_ang, _x.wheel2_vel, _x.wheel3_ang, _x.wheel3_vel,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
