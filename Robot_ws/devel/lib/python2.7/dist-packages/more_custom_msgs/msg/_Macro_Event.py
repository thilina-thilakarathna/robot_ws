# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from more_custom_msgs/Macro_Event.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import more_custom_msgs.msg

class Macro_Event(genpy.Message):
  _md5sum = "bee64d1dba84273604a8df1ddefab82a"
  _type = "more_custom_msgs/Macro_Event"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64          idx
Macro_Target    current_targets
================================================================================
MSG: more_custom_msgs/Macro_Target
string                  target_id
bool                    hanging
int64                  id
int8                   status
float64                 confidence
int32                  objects_length
Macro_Info              info
Macro_Measurement       measurement
Macro_TimePosition      position
Macro_Position          velocity
Macro_Position          position_uncertainty
Macro_Position          velocity_uncertainty
Macro_Position          predicted_velocity
Macro_Position          predicted_position_uncertainty
Macro_Position          predicted_velocity_uncertainty
Macro_TimePosition      predicted_position
Macro_TimePosition[]    position_over_time
================================================================================
MSG: more_custom_msgs/Macro_Info
string                  first_time
string                  last_time
Macro_Marker            first_marker
Macro_Marker            last_marker
================================================================================
MSG: more_custom_msgs/Macro_Marker
int64           idx
float64         dist
================================================================================
MSG: more_custom_msgs/Macro_Measurement
float64         a_deg
float64         r_m
================================================================================
MSG: more_custom_msgs/Macro_TimePosition
float64         x_m
float64         y_m
float64         x_px
float64         y_px
float64         lat_deg
float64         lon_deg
================================================================================
MSG: more_custom_msgs/Macro_Position
float64         x_m
float64         y_m"""
  __slots__ = ['idx','current_targets']
  _slot_types = ['int64','more_custom_msgs/Macro_Target']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       idx,current_targets

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Macro_Event, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.idx is None:
        self.idx = 0
      if self.current_targets is None:
        self.current_targets = more_custom_msgs.msg.Macro_Target()
    else:
      self.idx = 0
      self.current_targets = more_custom_msgs.msg.Macro_Target()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_q().pack(self.idx))
      _x = self.current_targets.target_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bqbdi().pack(_x.current_targets.hanging, _x.current_targets.id, _x.current_targets.status, _x.current_targets.confidence, _x.current_targets.objects_length))
      _x = self.current_targets.info.first_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.current_targets.info.last_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_qdq27d().pack(_x.current_targets.info.first_marker.idx, _x.current_targets.info.first_marker.dist, _x.current_targets.info.last_marker.idx, _x.current_targets.info.last_marker.dist, _x.current_targets.measurement.a_deg, _x.current_targets.measurement.r_m, _x.current_targets.position.x_m, _x.current_targets.position.y_m, _x.current_targets.position.x_px, _x.current_targets.position.y_px, _x.current_targets.position.lat_deg, _x.current_targets.position.lon_deg, _x.current_targets.velocity.x_m, _x.current_targets.velocity.y_m, _x.current_targets.position_uncertainty.x_m, _x.current_targets.position_uncertainty.y_m, _x.current_targets.velocity_uncertainty.x_m, _x.current_targets.velocity_uncertainty.y_m, _x.current_targets.predicted_velocity.x_m, _x.current_targets.predicted_velocity.y_m, _x.current_targets.predicted_position_uncertainty.x_m, _x.current_targets.predicted_position_uncertainty.y_m, _x.current_targets.predicted_velocity_uncertainty.x_m, _x.current_targets.predicted_velocity_uncertainty.y_m, _x.current_targets.predicted_position.x_m, _x.current_targets.predicted_position.y_m, _x.current_targets.predicted_position.x_px, _x.current_targets.predicted_position.y_px, _x.current_targets.predicted_position.lat_deg, _x.current_targets.predicted_position.lon_deg))
      length = len(self.current_targets.position_over_time)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_targets.position_over_time:
        _x = val1
        buff.write(_get_struct_6d().pack(_x.x_m, _x.y_m, _x.x_px, _x.y_px, _x.lat_deg, _x.lon_deg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.current_targets is None:
        self.current_targets = more_custom_msgs.msg.Macro_Target()
      end = 0
      start = end
      end += 8
      (self.idx,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_targets.target_id = str[start:end].decode('utf-8')
      else:
        self.current_targets.target_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.current_targets.hanging, _x.current_targets.id, _x.current_targets.status, _x.current_targets.confidence, _x.current_targets.objects_length,) = _get_struct_Bqbdi().unpack(str[start:end])
      self.current_targets.hanging = bool(self.current_targets.hanging)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_targets.info.first_time = str[start:end].decode('utf-8')
      else:
        self.current_targets.info.first_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_targets.info.last_time = str[start:end].decode('utf-8')
      else:
        self.current_targets.info.last_time = str[start:end]
      _x = self
      start = end
      end += 240
      (_x.current_targets.info.first_marker.idx, _x.current_targets.info.first_marker.dist, _x.current_targets.info.last_marker.idx, _x.current_targets.info.last_marker.dist, _x.current_targets.measurement.a_deg, _x.current_targets.measurement.r_m, _x.current_targets.position.x_m, _x.current_targets.position.y_m, _x.current_targets.position.x_px, _x.current_targets.position.y_px, _x.current_targets.position.lat_deg, _x.current_targets.position.lon_deg, _x.current_targets.velocity.x_m, _x.current_targets.velocity.y_m, _x.current_targets.position_uncertainty.x_m, _x.current_targets.position_uncertainty.y_m, _x.current_targets.velocity_uncertainty.x_m, _x.current_targets.velocity_uncertainty.y_m, _x.current_targets.predicted_velocity.x_m, _x.current_targets.predicted_velocity.y_m, _x.current_targets.predicted_position_uncertainty.x_m, _x.current_targets.predicted_position_uncertainty.y_m, _x.current_targets.predicted_velocity_uncertainty.x_m, _x.current_targets.predicted_velocity_uncertainty.y_m, _x.current_targets.predicted_position.x_m, _x.current_targets.predicted_position.y_m, _x.current_targets.predicted_position.x_px, _x.current_targets.predicted_position.y_px, _x.current_targets.predicted_position.lat_deg, _x.current_targets.predicted_position.lon_deg,) = _get_struct_qdq27d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_targets.position_over_time = []
      for i in range(0, length):
        val1 = more_custom_msgs.msg.Macro_TimePosition()
        _x = val1
        start = end
        end += 48
        (_x.x_m, _x.y_m, _x.x_px, _x.y_px, _x.lat_deg, _x.lon_deg,) = _get_struct_6d().unpack(str[start:end])
        self.current_targets.position_over_time.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_q().pack(self.idx))
      _x = self.current_targets.target_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bqbdi().pack(_x.current_targets.hanging, _x.current_targets.id, _x.current_targets.status, _x.current_targets.confidence, _x.current_targets.objects_length))
      _x = self.current_targets.info.first_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.current_targets.info.last_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_qdq27d().pack(_x.current_targets.info.first_marker.idx, _x.current_targets.info.first_marker.dist, _x.current_targets.info.last_marker.idx, _x.current_targets.info.last_marker.dist, _x.current_targets.measurement.a_deg, _x.current_targets.measurement.r_m, _x.current_targets.position.x_m, _x.current_targets.position.y_m, _x.current_targets.position.x_px, _x.current_targets.position.y_px, _x.current_targets.position.lat_deg, _x.current_targets.position.lon_deg, _x.current_targets.velocity.x_m, _x.current_targets.velocity.y_m, _x.current_targets.position_uncertainty.x_m, _x.current_targets.position_uncertainty.y_m, _x.current_targets.velocity_uncertainty.x_m, _x.current_targets.velocity_uncertainty.y_m, _x.current_targets.predicted_velocity.x_m, _x.current_targets.predicted_velocity.y_m, _x.current_targets.predicted_position_uncertainty.x_m, _x.current_targets.predicted_position_uncertainty.y_m, _x.current_targets.predicted_velocity_uncertainty.x_m, _x.current_targets.predicted_velocity_uncertainty.y_m, _x.current_targets.predicted_position.x_m, _x.current_targets.predicted_position.y_m, _x.current_targets.predicted_position.x_px, _x.current_targets.predicted_position.y_px, _x.current_targets.predicted_position.lat_deg, _x.current_targets.predicted_position.lon_deg))
      length = len(self.current_targets.position_over_time)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_targets.position_over_time:
        _x = val1
        buff.write(_get_struct_6d().pack(_x.x_m, _x.y_m, _x.x_px, _x.y_px, _x.lat_deg, _x.lon_deg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.current_targets is None:
        self.current_targets = more_custom_msgs.msg.Macro_Target()
      end = 0
      start = end
      end += 8
      (self.idx,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_targets.target_id = str[start:end].decode('utf-8')
      else:
        self.current_targets.target_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.current_targets.hanging, _x.current_targets.id, _x.current_targets.status, _x.current_targets.confidence, _x.current_targets.objects_length,) = _get_struct_Bqbdi().unpack(str[start:end])
      self.current_targets.hanging = bool(self.current_targets.hanging)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_targets.info.first_time = str[start:end].decode('utf-8')
      else:
        self.current_targets.info.first_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_targets.info.last_time = str[start:end].decode('utf-8')
      else:
        self.current_targets.info.last_time = str[start:end]
      _x = self
      start = end
      end += 240
      (_x.current_targets.info.first_marker.idx, _x.current_targets.info.first_marker.dist, _x.current_targets.info.last_marker.idx, _x.current_targets.info.last_marker.dist, _x.current_targets.measurement.a_deg, _x.current_targets.measurement.r_m, _x.current_targets.position.x_m, _x.current_targets.position.y_m, _x.current_targets.position.x_px, _x.current_targets.position.y_px, _x.current_targets.position.lat_deg, _x.current_targets.position.lon_deg, _x.current_targets.velocity.x_m, _x.current_targets.velocity.y_m, _x.current_targets.position_uncertainty.x_m, _x.current_targets.position_uncertainty.y_m, _x.current_targets.velocity_uncertainty.x_m, _x.current_targets.velocity_uncertainty.y_m, _x.current_targets.predicted_velocity.x_m, _x.current_targets.predicted_velocity.y_m, _x.current_targets.predicted_position_uncertainty.x_m, _x.current_targets.predicted_position_uncertainty.y_m, _x.current_targets.predicted_velocity_uncertainty.x_m, _x.current_targets.predicted_velocity_uncertainty.y_m, _x.current_targets.predicted_position.x_m, _x.current_targets.predicted_position.y_m, _x.current_targets.predicted_position.x_px, _x.current_targets.predicted_position.y_px, _x.current_targets.predicted_position.lat_deg, _x.current_targets.predicted_position.lon_deg,) = _get_struct_qdq27d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_targets.position_over_time = []
      for i in range(0, length):
        val1 = more_custom_msgs.msg.Macro_TimePosition()
        _x = val1
        start = end
        end += 48
        (_x.x_m, _x.y_m, _x.x_px, _x.y_px, _x.lat_deg, _x.lon_deg,) = _get_struct_6d().unpack(str[start:end])
        self.current_targets.position_over_time.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_qdq27d = None
def _get_struct_qdq27d():
    global _struct_qdq27d
    if _struct_qdq27d is None:
        _struct_qdq27d = struct.Struct("<qdq27d")
    return _struct_qdq27d
_struct_Bqbdi = None
def _get_struct_Bqbdi():
    global _struct_Bqbdi
    if _struct_Bqbdi is None:
        _struct_Bqbdi = struct.Struct("<Bqbdi")
    return _struct_Bqbdi
