# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from more_custom_msgs/Macro_Info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import more_custom_msgs.msg

class Macro_Info(genpy.Message):
  _md5sum = "ad54acbd806f81ffe9b66e8fb122305c"
  _type = "more_custom_msgs/Macro_Info"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string                  first_time
string                  last_time
Macro_Marker            first_marker
Macro_Marker            last_marker
================================================================================
MSG: more_custom_msgs/Macro_Marker
int64           idx
float64         dist"""
  __slots__ = ['first_time','last_time','first_marker','last_marker']
  _slot_types = ['string','string','more_custom_msgs/Macro_Marker','more_custom_msgs/Macro_Marker']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       first_time,last_time,first_marker,last_marker

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Macro_Info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.first_time is None:
        self.first_time = ''
      if self.last_time is None:
        self.last_time = ''
      if self.first_marker is None:
        self.first_marker = more_custom_msgs.msg.Macro_Marker()
      if self.last_marker is None:
        self.last_marker = more_custom_msgs.msg.Macro_Marker()
    else:
      self.first_time = ''
      self.last_time = ''
      self.first_marker = more_custom_msgs.msg.Macro_Marker()
      self.last_marker = more_custom_msgs.msg.Macro_Marker()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.first_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.last_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_qdqd().pack(_x.first_marker.idx, _x.first_marker.dist, _x.last_marker.idx, _x.last_marker.dist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.first_marker is None:
        self.first_marker = more_custom_msgs.msg.Macro_Marker()
      if self.last_marker is None:
        self.last_marker = more_custom_msgs.msg.Macro_Marker()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.first_time = str[start:end].decode('utf-8')
      else:
        self.first_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_time = str[start:end].decode('utf-8')
      else:
        self.last_time = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.first_marker.idx, _x.first_marker.dist, _x.last_marker.idx, _x.last_marker.dist,) = _get_struct_qdqd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.first_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.last_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_qdqd().pack(_x.first_marker.idx, _x.first_marker.dist, _x.last_marker.idx, _x.last_marker.dist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.first_marker is None:
        self.first_marker = more_custom_msgs.msg.Macro_Marker()
      if self.last_marker is None:
        self.last_marker = more_custom_msgs.msg.Macro_Marker()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.first_time = str[start:end].decode('utf-8')
      else:
        self.first_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_time = str[start:end].decode('utf-8')
      else:
        self.last_time = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.first_marker.idx, _x.first_marker.dist, _x.last_marker.idx, _x.last_marker.dist,) = _get_struct_qdqd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_qdqd = None
def _get_struct_qdqd():
    global _struct_qdqd
    if _struct_qdqd is None:
        _struct_qdqd = struct.Struct("<qdqd")
    return _struct_qdqd
