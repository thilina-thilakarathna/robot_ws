# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from more_custom_msgs/Hve_Weather_Report.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import more_custom_msgs.msg
import std_msgs.msg

class Hve_Weather_Report(genpy.Message):
  _md5sum = "7860c5d07f1405906687faa2f7943979"
  _type = "more_custom_msgs/Hve_Weather_Report"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header     header
Hve_Weather_Query[] sources
Hve_Weather_Query   report
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: more_custom_msgs/Hve_Weather_Query
std_msgs/Header header
string          source
string          condition
float32         temperature
string          temperatureUnits
float32         pressure
string          pressureUnits
string          pressureTendency
float32         humidity
float32         windSpeed
string          windSpeedUnits
float32         windDirection
float32         windGust
string          windGustUnits
float32         windGustDirection
float32         precipitation_past1hr
float32         precipitation_past3hr
float32         precipitation_past6hr
float32         precipitation_past9hr
float32         precipitation_past12hr
float32         precipitation_past24hr
float32         UVIndex
float32         visibility
float32         dewPoint
string          dewPointUnits
float32         sunrise
float32         sunset
"""
  __slots__ = ['header','sources','report']
  _slot_types = ['std_msgs/Header','more_custom_msgs/Hve_Weather_Query[]','more_custom_msgs/Hve_Weather_Query']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sources,report

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Hve_Weather_Report, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sources is None:
        self.sources = []
      if self.report is None:
        self.report = more_custom_msgs.msg.Hve_Weather_Query()
    else:
      self.header = std_msgs.msg.Header()
      self.sources = []
      self.report = more_custom_msgs.msg.Hve_Weather_Query()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.sources)
      buff.write(_struct_I.pack(length))
      for val1 in self.sources:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.source
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.condition
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_f().pack(val1.temperature))
        _x = val1.temperatureUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_f().pack(val1.pressure))
        _x = val1.pressureUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.pressureTendency
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.humidity, _x.windSpeed))
        _x = val1.windSpeedUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.windDirection, _x.windGust))
        _x = val1.windGustUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_10f().pack(_x.windGustDirection, _x.precipitation_past1hr, _x.precipitation_past3hr, _x.precipitation_past6hr, _x.precipitation_past9hr, _x.precipitation_past12hr, _x.precipitation_past24hr, _x.UVIndex, _x.visibility, _x.dewPoint))
        _x = val1.dewPointUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.sunrise, _x.sunset))
      _x = self
      buff.write(_get_struct_3I().pack(_x.report.header.seq, _x.report.header.stamp.secs, _x.report.header.stamp.nsecs))
      _x = self.report.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.report.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.report.condition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.report.temperature))
      _x = self.report.temperatureUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.report.pressure))
      _x = self.report.pressureUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.report.pressureTendency
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.report.humidity, _x.report.windSpeed))
      _x = self.report.windSpeedUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.report.windDirection, _x.report.windGust))
      _x = self.report.windGustUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10f().pack(_x.report.windGustDirection, _x.report.precipitation_past1hr, _x.report.precipitation_past3hr, _x.report.precipitation_past6hr, _x.report.precipitation_past9hr, _x.report.precipitation_past12hr, _x.report.precipitation_past24hr, _x.report.UVIndex, _x.report.visibility, _x.report.dewPoint))
      _x = self.report.dewPointUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.report.sunrise, _x.report.sunset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sources is None:
        self.sources = None
      if self.report is None:
        self.report = more_custom_msgs.msg.Hve_Weather_Query()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sources = []
      for i in range(0, length):
        val1 = more_custom_msgs.msg.Hve_Weather_Query()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _get_struct_I().unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8')
        else:
          _v3.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.source = str[start:end].decode('utf-8')
        else:
          val1.source = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.condition = str[start:end].decode('utf-8')
        else:
          val1.condition = str[start:end]
        start = end
        end += 4
        (val1.temperature,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.temperatureUnits = str[start:end].decode('utf-8')
        else:
          val1.temperatureUnits = str[start:end]
        start = end
        end += 4
        (val1.pressure,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.pressureUnits = str[start:end].decode('utf-8')
        else:
          val1.pressureUnits = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.pressureTendency = str[start:end].decode('utf-8')
        else:
          val1.pressureTendency = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.humidity, _x.windSpeed,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.windSpeedUnits = str[start:end].decode('utf-8')
        else:
          val1.windSpeedUnits = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.windDirection, _x.windGust,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.windGustUnits = str[start:end].decode('utf-8')
        else:
          val1.windGustUnits = str[start:end]
        _x = val1
        start = end
        end += 40
        (_x.windGustDirection, _x.precipitation_past1hr, _x.precipitation_past3hr, _x.precipitation_past6hr, _x.precipitation_past9hr, _x.precipitation_past12hr, _x.precipitation_past24hr, _x.UVIndex, _x.visibility, _x.dewPoint,) = _get_struct_10f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.dewPointUnits = str[start:end].decode('utf-8')
        else:
          val1.dewPointUnits = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.sunrise, _x.sunset,) = _get_struct_2f().unpack(str[start:end])
        self.sources.append(val1)
      _x = self
      start = end
      end += 12
      (_x.report.header.seq, _x.report.header.stamp.secs, _x.report.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.report.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.source = str[start:end].decode('utf-8')
      else:
        self.report.source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.condition = str[start:end].decode('utf-8')
      else:
        self.report.condition = str[start:end]
      start = end
      end += 4
      (self.report.temperature,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.temperatureUnits = str[start:end].decode('utf-8')
      else:
        self.report.temperatureUnits = str[start:end]
      start = end
      end += 4
      (self.report.pressure,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.pressureUnits = str[start:end].decode('utf-8')
      else:
        self.report.pressureUnits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.pressureTendency = str[start:end].decode('utf-8')
      else:
        self.report.pressureTendency = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.report.humidity, _x.report.windSpeed,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.windSpeedUnits = str[start:end].decode('utf-8')
      else:
        self.report.windSpeedUnits = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.report.windDirection, _x.report.windGust,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.windGustUnits = str[start:end].decode('utf-8')
      else:
        self.report.windGustUnits = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.report.windGustDirection, _x.report.precipitation_past1hr, _x.report.precipitation_past3hr, _x.report.precipitation_past6hr, _x.report.precipitation_past9hr, _x.report.precipitation_past12hr, _x.report.precipitation_past24hr, _x.report.UVIndex, _x.report.visibility, _x.report.dewPoint,) = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.dewPointUnits = str[start:end].decode('utf-8')
      else:
        self.report.dewPointUnits = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.report.sunrise, _x.report.sunset,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.sources)
      buff.write(_struct_I.pack(length))
      for val1 in self.sources:
        _v5 = val1.header
        buff.write(_get_struct_I().pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.source
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.condition
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_f().pack(val1.temperature))
        _x = val1.temperatureUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_f().pack(val1.pressure))
        _x = val1.pressureUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.pressureTendency
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.humidity, _x.windSpeed))
        _x = val1.windSpeedUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.windDirection, _x.windGust))
        _x = val1.windGustUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_10f().pack(_x.windGustDirection, _x.precipitation_past1hr, _x.precipitation_past3hr, _x.precipitation_past6hr, _x.precipitation_past9hr, _x.precipitation_past12hr, _x.precipitation_past24hr, _x.UVIndex, _x.visibility, _x.dewPoint))
        _x = val1.dewPointUnits
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.sunrise, _x.sunset))
      _x = self
      buff.write(_get_struct_3I().pack(_x.report.header.seq, _x.report.header.stamp.secs, _x.report.header.stamp.nsecs))
      _x = self.report.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.report.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.report.condition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.report.temperature))
      _x = self.report.temperatureUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.report.pressure))
      _x = self.report.pressureUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.report.pressureTendency
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.report.humidity, _x.report.windSpeed))
      _x = self.report.windSpeedUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.report.windDirection, _x.report.windGust))
      _x = self.report.windGustUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10f().pack(_x.report.windGustDirection, _x.report.precipitation_past1hr, _x.report.precipitation_past3hr, _x.report.precipitation_past6hr, _x.report.precipitation_past9hr, _x.report.precipitation_past12hr, _x.report.precipitation_past24hr, _x.report.UVIndex, _x.report.visibility, _x.report.dewPoint))
      _x = self.report.dewPointUnits
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.report.sunrise, _x.report.sunset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sources is None:
        self.sources = None
      if self.report is None:
        self.report = more_custom_msgs.msg.Hve_Weather_Query()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sources = []
      for i in range(0, length):
        val1 = more_custom_msgs.msg.Hve_Weather_Query()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8')
        else:
          _v7.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.source = str[start:end].decode('utf-8')
        else:
          val1.source = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.condition = str[start:end].decode('utf-8')
        else:
          val1.condition = str[start:end]
        start = end
        end += 4
        (val1.temperature,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.temperatureUnits = str[start:end].decode('utf-8')
        else:
          val1.temperatureUnits = str[start:end]
        start = end
        end += 4
        (val1.pressure,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.pressureUnits = str[start:end].decode('utf-8')
        else:
          val1.pressureUnits = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.pressureTendency = str[start:end].decode('utf-8')
        else:
          val1.pressureTendency = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.humidity, _x.windSpeed,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.windSpeedUnits = str[start:end].decode('utf-8')
        else:
          val1.windSpeedUnits = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.windDirection, _x.windGust,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.windGustUnits = str[start:end].decode('utf-8')
        else:
          val1.windGustUnits = str[start:end]
        _x = val1
        start = end
        end += 40
        (_x.windGustDirection, _x.precipitation_past1hr, _x.precipitation_past3hr, _x.precipitation_past6hr, _x.precipitation_past9hr, _x.precipitation_past12hr, _x.precipitation_past24hr, _x.UVIndex, _x.visibility, _x.dewPoint,) = _get_struct_10f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.dewPointUnits = str[start:end].decode('utf-8')
        else:
          val1.dewPointUnits = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.sunrise, _x.sunset,) = _get_struct_2f().unpack(str[start:end])
        self.sources.append(val1)
      _x = self
      start = end
      end += 12
      (_x.report.header.seq, _x.report.header.stamp.secs, _x.report.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.report.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.source = str[start:end].decode('utf-8')
      else:
        self.report.source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.condition = str[start:end].decode('utf-8')
      else:
        self.report.condition = str[start:end]
      start = end
      end += 4
      (self.report.temperature,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.temperatureUnits = str[start:end].decode('utf-8')
      else:
        self.report.temperatureUnits = str[start:end]
      start = end
      end += 4
      (self.report.pressure,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.pressureUnits = str[start:end].decode('utf-8')
      else:
        self.report.pressureUnits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.pressureTendency = str[start:end].decode('utf-8')
      else:
        self.report.pressureTendency = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.report.humidity, _x.report.windSpeed,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.windSpeedUnits = str[start:end].decode('utf-8')
      else:
        self.report.windSpeedUnits = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.report.windDirection, _x.report.windGust,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.windGustUnits = str[start:end].decode('utf-8')
      else:
        self.report.windGustUnits = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.report.windGustDirection, _x.report.precipitation_past1hr, _x.report.precipitation_past3hr, _x.report.precipitation_past6hr, _x.report.precipitation_past9hr, _x.report.precipitation_past12hr, _x.report.precipitation_past24hr, _x.report.UVIndex, _x.report.visibility, _x.report.dewPoint,) = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.dewPointUnits = str[start:end].decode('utf-8')
      else:
        self.report.dewPointUnits = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.report.sunrise, _x.report.sunset,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
