# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from more_custom_msgs/BeekeeperReason.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BeekeeperReason(genpy.Message):
  _md5sum = "f9f1c6ed51ceed185488f72df99bcb13"
  _type = "more_custom_msgs/BeekeeperReason"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 NONE                    = 0  # no reason
uint8 LOITER_TIMEOUT          = 1  # the Bee has been inactive for too long. Returning to hive
uint8 BATTERY_LOW             = 2  # Bee battery below threshold
uint8 INSPECTION_POINT_FAIL   = 3  # failed to find an inspection point
uint8 PATH_PLAN_FAIL          = 4  # failed to plan a path
uint8 GPS_FIX_INSUFFICIENT    = 5  # GPS fix less than required
uint8 GPS_POSITION_INACCURATE = 6  # the measured GPS position is incorrect
uint8 GPS_TRAFO_ERROR         = 7  # error when transforming between global and local coordinates
uint8 COMM_ERROR              = 8  # failed sending something to the Bee
uint8 WEATHER                 = 9  # bad weather conditions
uint8 FLIGHT_RESTRICTION      = 10 # flight restriction above property
uint8 ROOF                    = 11 # roof failed to open
uint8 BEE_STATE               = 12 # the Bee is in a bad state
uint8 LOSS_OF_CONTROL         = 13 # the Bee has become uncontrollable
uint8 SD_CARD_FAILURE         = 14 # Writing or reading the SD card on the Bee has failed
uint8 MOTOR_ESC_FAILURE       = 15 # the motors or ESCs have failed
uint8 IMU_FAILURE             = 16 # the IMU has failed
uint8 RANGE_SENSOR_FAILURE    = 17 # one or more range sensors have failed
uint8 BEACON_SENSOR_FAILURE   = 18 # the beacon sensor has failed
uint8 OTHER                   = 19 # some other unexpected reason

uint8 reason
"""
  # Pseudo-constants
  NONE = 0
  LOITER_TIMEOUT = 1
  BATTERY_LOW = 2
  INSPECTION_POINT_FAIL = 3
  PATH_PLAN_FAIL = 4
  GPS_FIX_INSUFFICIENT = 5
  GPS_POSITION_INACCURATE = 6
  GPS_TRAFO_ERROR = 7
  COMM_ERROR = 8
  WEATHER = 9
  FLIGHT_RESTRICTION = 10
  ROOF = 11
  BEE_STATE = 12
  LOSS_OF_CONTROL = 13
  SD_CARD_FAILURE = 14
  MOTOR_ESC_FAILURE = 15
  IMU_FAILURE = 16
  RANGE_SENSOR_FAILURE = 17
  BEACON_SENSOR_FAILURE = 18
  OTHER = 19

  __slots__ = ['reason']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reason

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BeekeeperReason, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.reason is None:
        self.reason = 0
    else:
      self.reason = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.reason))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.reason,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.reason))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.reason,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
