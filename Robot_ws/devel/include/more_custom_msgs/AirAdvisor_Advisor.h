// Generated by gencpp from file more_custom_msgs/AirAdvisor_Advisor.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_AIRADVISOR_ADVISOR_H
#define MORE_CUSTOM_MSGS_MESSAGE_AIRADVISOR_ADVISOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace more_custom_msgs
{
template <class ContainerAllocator>
struct AirAdvisor_Advisor_
{
  typedef AirAdvisor_Advisor_<ContainerAllocator> Type;

  AirAdvisor_Advisor_()
    : id()
    , name()
    , last_updated()
    , latitude(0.0)
    , longitude(0.0)
    , distance(0.0)
    , type()
    , city()
    , state()
    , country()
    , properties_json()
    , color()
    , requirements()  {
    }
  AirAdvisor_Advisor_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , name(_alloc)
    , last_updated(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , distance(0.0)
    , type(_alloc)
    , city(_alloc)
    , state(_alloc)
    , country(_alloc)
    , properties_json(_alloc)
    , color(_alloc)
    , requirements(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _last_updated_type;
  _last_updated_type last_updated;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _distance_type;
  _distance_type distance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _city_type;
  _city_type city;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _country_type;
  _country_type country;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _properties_json_type;
  _properties_json_type properties_json;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_type;
  _color_type color;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _requirements_type;
  _requirements_type requirements;





  typedef boost::shared_ptr< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> const> ConstPtr;

}; // struct AirAdvisor_Advisor_

typedef ::more_custom_msgs::AirAdvisor_Advisor_<std::allocator<void> > AirAdvisor_Advisor;

typedef boost::shared_ptr< ::more_custom_msgs::AirAdvisor_Advisor > AirAdvisor_AdvisorPtr;
typedef boost::shared_ptr< ::more_custom_msgs::AirAdvisor_Advisor const> AirAdvisor_AdvisorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14409325369a41b852710e9e16b0bb59";
  }

  static const char* value(const ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14409325369a41b8ULL;
  static const uint64_t static_value2 = 0x52710e9e16b0bb59ULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/AirAdvisor_Advisor";
  }

  static const char* value(const ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  id\n\
string  name\n\
string  last_updated\n\
float32 latitude\n\
float32 longitude\n\
float32 distance\n\
string  type\n\
string  city\n\
string  state\n\
string  country\n\
string  properties_json\n\
string  color\n\
string  requirements\n\
";
  }

  static const char* value(const ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.last_updated);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.distance);
      stream.next(m.type);
      stream.next(m.city);
      stream.next(m.state);
      stream.next(m.country);
      stream.next(m.properties_json);
      stream.next(m.color);
      stream.next(m.requirements);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AirAdvisor_Advisor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "last_updated: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.last_updated);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "city: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.city);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "country: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.country);
    s << indent << "properties_json: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.properties_json);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color);
    s << indent << "requirements: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.requirements);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_AIRADVISOR_ADVISOR_H
