// Generated by gencpp from file more_custom_msgs/Macro_Target.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_MACRO_TARGET_H
#define MORE_CUSTOM_MSGS_MESSAGE_MACRO_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <more_custom_msgs/Macro_Info.h>
#include <more_custom_msgs/Macro_Measurement.h>
#include <more_custom_msgs/Macro_TimePosition.h>
#include <more_custom_msgs/Macro_Position.h>
#include <more_custom_msgs/Macro_Position.h>
#include <more_custom_msgs/Macro_Position.h>
#include <more_custom_msgs/Macro_Position.h>
#include <more_custom_msgs/Macro_Position.h>
#include <more_custom_msgs/Macro_Position.h>
#include <more_custom_msgs/Macro_TimePosition.h>
#include <more_custom_msgs/Macro_TimePosition.h>

namespace more_custom_msgs
{
template <class ContainerAllocator>
struct Macro_Target_
{
  typedef Macro_Target_<ContainerAllocator> Type;

  Macro_Target_()
    : target_id()
    , hanging(false)
    , id(0)
    , status(0)
    , confidence(0.0)
    , objects_length(0)
    , info()
    , measurement()
    , position()
    , velocity()
    , position_uncertainty()
    , velocity_uncertainty()
    , predicted_velocity()
    , predicted_position_uncertainty()
    , predicted_velocity_uncertainty()
    , predicted_position()
    , position_over_time()  {
    }
  Macro_Target_(const ContainerAllocator& _alloc)
    : target_id(_alloc)
    , hanging(false)
    , id(0)
    , status(0)
    , confidence(0.0)
    , objects_length(0)
    , info(_alloc)
    , measurement(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , position_uncertainty(_alloc)
    , velocity_uncertainty(_alloc)
    , predicted_velocity(_alloc)
    , predicted_position_uncertainty(_alloc)
    , predicted_velocity_uncertainty(_alloc)
    , predicted_position(_alloc)
    , position_over_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_id_type;
  _target_id_type target_id;

   typedef uint8_t _hanging_type;
  _hanging_type hanging;

   typedef int64_t _id_type;
  _id_type id;

   typedef int8_t _status_type;
  _status_type status;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef int32_t _objects_length_type;
  _objects_length_type objects_length;

   typedef  ::more_custom_msgs::Macro_Info_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef  ::more_custom_msgs::Macro_Measurement_<ContainerAllocator>  _measurement_type;
  _measurement_type measurement;

   typedef  ::more_custom_msgs::Macro_TimePosition_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::more_custom_msgs::Macro_Position_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::more_custom_msgs::Macro_Position_<ContainerAllocator>  _position_uncertainty_type;
  _position_uncertainty_type position_uncertainty;

   typedef  ::more_custom_msgs::Macro_Position_<ContainerAllocator>  _velocity_uncertainty_type;
  _velocity_uncertainty_type velocity_uncertainty;

   typedef  ::more_custom_msgs::Macro_Position_<ContainerAllocator>  _predicted_velocity_type;
  _predicted_velocity_type predicted_velocity;

   typedef  ::more_custom_msgs::Macro_Position_<ContainerAllocator>  _predicted_position_uncertainty_type;
  _predicted_position_uncertainty_type predicted_position_uncertainty;

   typedef  ::more_custom_msgs::Macro_Position_<ContainerAllocator>  _predicted_velocity_uncertainty_type;
  _predicted_velocity_uncertainty_type predicted_velocity_uncertainty;

   typedef  ::more_custom_msgs::Macro_TimePosition_<ContainerAllocator>  _predicted_position_type;
  _predicted_position_type predicted_position;

   typedef std::vector< ::more_custom_msgs::Macro_TimePosition_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::more_custom_msgs::Macro_TimePosition_<ContainerAllocator> >::other >  _position_over_time_type;
  _position_over_time_type position_over_time;





  typedef boost::shared_ptr< ::more_custom_msgs::Macro_Target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::Macro_Target_<ContainerAllocator> const> ConstPtr;

}; // struct Macro_Target_

typedef ::more_custom_msgs::Macro_Target_<std::allocator<void> > Macro_Target;

typedef boost::shared_ptr< ::more_custom_msgs::Macro_Target > Macro_TargetPtr;
typedef boost::shared_ptr< ::more_custom_msgs::Macro_Target const> Macro_TargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::Macro_Target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::Macro_Target_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Macro_Target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Macro_Target_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Macro_Target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Macro_Target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Macro_Target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Macro_Target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::Macro_Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a51380bd508ea55125601a08f8a8a89";
  }

  static const char* value(const ::more_custom_msgs::Macro_Target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a51380bd508ea55ULL;
  static const uint64_t static_value2 = 0x125601a08f8a8a89ULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::Macro_Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/Macro_Target";
  }

  static const char* value(const ::more_custom_msgs::Macro_Target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::Macro_Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string                  target_id\n\
bool                    hanging\n\
int64                  id\n\
int8                   status\n\
float64                 confidence\n\
int32                  objects_length\n\
Macro_Info              info\n\
Macro_Measurement       measurement\n\
Macro_TimePosition      position\n\
Macro_Position          velocity\n\
Macro_Position          position_uncertainty\n\
Macro_Position          velocity_uncertainty\n\
Macro_Position          predicted_velocity\n\
Macro_Position          predicted_position_uncertainty\n\
Macro_Position          predicted_velocity_uncertainty\n\
Macro_TimePosition      predicted_position\n\
Macro_TimePosition[]    position_over_time\n\
================================================================================\n\
MSG: more_custom_msgs/Macro_Info\n\
string                  first_time\n\
string                  last_time\n\
Macro_Marker            first_marker\n\
Macro_Marker            last_marker\n\
================================================================================\n\
MSG: more_custom_msgs/Macro_Marker\n\
int64           idx\n\
float64         dist\n\
================================================================================\n\
MSG: more_custom_msgs/Macro_Measurement\n\
float64         a_deg\n\
float64         r_m\n\
================================================================================\n\
MSG: more_custom_msgs/Macro_TimePosition\n\
float64         x_m\n\
float64         y_m\n\
float64         x_px\n\
float64         y_px\n\
float64         lat_deg\n\
float64         lon_deg\n\
================================================================================\n\
MSG: more_custom_msgs/Macro_Position\n\
float64         x_m\n\
float64         y_m\n\
";
  }

  static const char* value(const ::more_custom_msgs::Macro_Target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::Macro_Target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_id);
      stream.next(m.hanging);
      stream.next(m.id);
      stream.next(m.status);
      stream.next(m.confidence);
      stream.next(m.objects_length);
      stream.next(m.info);
      stream.next(m.measurement);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.position_uncertainty);
      stream.next(m.velocity_uncertainty);
      stream.next(m.predicted_velocity);
      stream.next(m.predicted_position_uncertainty);
      stream.next(m.predicted_velocity_uncertainty);
      stream.next(m.predicted_position);
      stream.next(m.position_over_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Macro_Target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::Macro_Target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::Macro_Target_<ContainerAllocator>& v)
  {
    s << indent << "target_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_id);
    s << indent << "hanging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hanging);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "objects_length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.objects_length);
    s << indent << "info: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "measurement: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Measurement_<ContainerAllocator> >::stream(s, indent + "  ", v.measurement);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_TimePosition_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Position_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "position_uncertainty: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Position_<ContainerAllocator> >::stream(s, indent + "  ", v.position_uncertainty);
    s << indent << "velocity_uncertainty: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Position_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity_uncertainty);
    s << indent << "predicted_velocity: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Position_<ContainerAllocator> >::stream(s, indent + "  ", v.predicted_velocity);
    s << indent << "predicted_position_uncertainty: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Position_<ContainerAllocator> >::stream(s, indent + "  ", v.predicted_position_uncertainty);
    s << indent << "predicted_velocity_uncertainty: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Position_<ContainerAllocator> >::stream(s, indent + "  ", v.predicted_velocity_uncertainty);
    s << indent << "predicted_position: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_TimePosition_<ContainerAllocator> >::stream(s, indent + "  ", v.predicted_position);
    s << indent << "position_over_time[]" << std::endl;
    for (size_t i = 0; i < v.position_over_time.size(); ++i)
    {
      s << indent << "  position_over_time[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::more_custom_msgs::Macro_TimePosition_<ContainerAllocator> >::stream(s, indent + "    ", v.position_over_time[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_MACRO_TARGET_H
