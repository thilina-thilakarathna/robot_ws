// Generated by gencpp from file more_custom_msgs/Hve_Conf_Param.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_HVE_CONF_PARAM_H
#define MORE_CUSTOM_MSGS_MESSAGE_HVE_CONF_PARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace more_custom_msgs
{
template <class ContainerAllocator>
struct Hve_Conf_Param_
{
  typedef Hve_Conf_Param_<ContainerAllocator> Type;

  Hve_Conf_Param_()
    : full_parameter_path()
    , parameter_value()  {
    }
  Hve_Conf_Param_(const ContainerAllocator& _alloc)
    : full_parameter_path(_alloc)
    , parameter_value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _full_parameter_path_type;
  _full_parameter_path_type full_parameter_path;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameter_value_type;
  _parameter_value_type parameter_value;





  typedef boost::shared_ptr< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> const> ConstPtr;

}; // struct Hve_Conf_Param_

typedef ::more_custom_msgs::Hve_Conf_Param_<std::allocator<void> > Hve_Conf_Param;

typedef boost::shared_ptr< ::more_custom_msgs::Hve_Conf_Param > Hve_Conf_ParamPtr;
typedef boost::shared_ptr< ::more_custom_msgs::Hve_Conf_Param const> Hve_Conf_ParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c21116653cb3bea9a6558a01a69c6804";
  }

  static const char* value(const ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc21116653cb3bea9ULL;
  static const uint64_t static_value2 = 0xa6558a01a69c6804ULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/Hve_Conf_Param";
  }

  static const char* value(const ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string full_parameter_path\n\
string parameter_value\n\
";
  }

  static const char* value(const ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.full_parameter_path);
      stream.next(m.parameter_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hve_Conf_Param_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::Hve_Conf_Param_<ContainerAllocator>& v)
  {
    s << indent << "full_parameter_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.full_parameter_path);
    s << indent << "parameter_value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameter_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_HVE_CONF_PARAM_H
