// Generated by gencpp from file more_custom_msgs/Macro_Info.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_MACRO_INFO_H
#define MORE_CUSTOM_MSGS_MESSAGE_MACRO_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <more_custom_msgs/Macro_Marker.h>
#include <more_custom_msgs/Macro_Marker.h>

namespace more_custom_msgs
{
template <class ContainerAllocator>
struct Macro_Info_
{
  typedef Macro_Info_<ContainerAllocator> Type;

  Macro_Info_()
    : first_time()
    , last_time()
    , first_marker()
    , last_marker()  {
    }
  Macro_Info_(const ContainerAllocator& _alloc)
    : first_time(_alloc)
    , last_time(_alloc)
    , first_marker(_alloc)
    , last_marker(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _first_time_type;
  _first_time_type first_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _last_time_type;
  _last_time_type last_time;

   typedef  ::more_custom_msgs::Macro_Marker_<ContainerAllocator>  _first_marker_type;
  _first_marker_type first_marker;

   typedef  ::more_custom_msgs::Macro_Marker_<ContainerAllocator>  _last_marker_type;
  _last_marker_type last_marker;





  typedef boost::shared_ptr< ::more_custom_msgs::Macro_Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::Macro_Info_<ContainerAllocator> const> ConstPtr;

}; // struct Macro_Info_

typedef ::more_custom_msgs::Macro_Info_<std::allocator<void> > Macro_Info;

typedef boost::shared_ptr< ::more_custom_msgs::Macro_Info > Macro_InfoPtr;
typedef boost::shared_ptr< ::more_custom_msgs::Macro_Info const> Macro_InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::Macro_Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Macro_Info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Macro_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Macro_Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad54acbd806f81ffe9b66e8fb122305c";
  }

  static const char* value(const ::more_custom_msgs::Macro_Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad54acbd806f81ffULL;
  static const uint64_t static_value2 = 0xe9b66e8fb122305cULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/Macro_Info";
  }

  static const char* value(const ::more_custom_msgs::Macro_Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string                  first_time\n\
string                  last_time\n\
Macro_Marker            first_marker\n\
Macro_Marker            last_marker\n\
================================================================================\n\
MSG: more_custom_msgs/Macro_Marker\n\
int64           idx\n\
float64         dist\n\
";
  }

  static const char* value(const ::more_custom_msgs::Macro_Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first_time);
      stream.next(m.last_time);
      stream.next(m.first_marker);
      stream.next(m.last_marker);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Macro_Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::Macro_Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::Macro_Info_<ContainerAllocator>& v)
  {
    s << indent << "first_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.first_time);
    s << indent << "last_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.last_time);
    s << indent << "first_marker: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Marker_<ContainerAllocator> >::stream(s, indent + "  ", v.first_marker);
    s << indent << "last_marker: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Macro_Marker_<ContainerAllocator> >::stream(s, indent + "  ", v.last_marker);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_MACRO_INFO_H
