// Generated by gencpp from file more_custom_msgs/SatInfo.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_SATINFO_H
#define MORE_CUSTOM_MSGS_MESSAGE_SATINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace more_custom_msgs
{
template <class ContainerAllocator>
struct SatInfo_
{
  typedef SatInfo_<ContainerAllocator> Type;

  SatInfo_()
    : header()
    , count(0)
    , svid()
    , used()
    , elevation()
    , azimuth()
    , snr()
    , SAT_INFO_MAX_SATELLITES(0)  {
      svid.assign(0);

      used.assign(0);

      elevation.assign(0);

      azimuth.assign(0);

      snr.assign(0);
  }
  SatInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , count(0)
    , svid()
    , used()
    , elevation()
    , azimuth()
    , snr()
    , SAT_INFO_MAX_SATELLITES(0)  {
  (void)_alloc;
      svid.assign(0);

      used.assign(0);

      elevation.assign(0);

      azimuth.assign(0);

      snr.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _count_type;
  _count_type count;

   typedef boost::array<uint8_t, 20>  _svid_type;
  _svid_type svid;

   typedef boost::array<uint8_t, 20>  _used_type;
  _used_type used;

   typedef boost::array<uint8_t, 20>  _elevation_type;
  _elevation_type elevation;

   typedef boost::array<uint8_t, 20>  _azimuth_type;
  _azimuth_type azimuth;

   typedef boost::array<uint8_t, 20>  _snr_type;
  _snr_type snr;

   typedef uint8_t _SAT_INFO_MAX_SATELLITES_type;
  _SAT_INFO_MAX_SATELLITES_type SAT_INFO_MAX_SATELLITES;





  typedef boost::shared_ptr< ::more_custom_msgs::SatInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::SatInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SatInfo_

typedef ::more_custom_msgs::SatInfo_<std::allocator<void> > SatInfo;

typedef boost::shared_ptr< ::more_custom_msgs::SatInfo > SatInfoPtr;
typedef boost::shared_ptr< ::more_custom_msgs::SatInfo const> SatInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::SatInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::SatInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::SatInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::SatInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::SatInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::SatInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::SatInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::SatInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::SatInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7049ca2678092fa9d4e859fb67dadfa";
  }

  static const char* value(const ::more_custom_msgs::SatInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7049ca2678092faULL;
  static const uint64_t static_value2 = 0x9d4e859fb67dadfaULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::SatInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/SatInfo";
  }

  static const char* value(const ::more_custom_msgs::SatInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::SatInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint8 count\n\
uint8[20] svid\n\
uint8[20] used\n\
uint8[20] elevation\n\
uint8[20] azimuth\n\
uint8[20] snr\n\
uint8 SAT_INFO_MAX_SATELLITES\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::more_custom_msgs::SatInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::SatInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.count);
      stream.next(m.svid);
      stream.next(m.used);
      stream.next(m.elevation);
      stream.next(m.azimuth);
      stream.next(m.snr);
      stream.next(m.SAT_INFO_MAX_SATELLITES);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SatInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::SatInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::SatInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.count);
    s << indent << "svid[]" << std::endl;
    for (size_t i = 0; i < v.svid.size(); ++i)
    {
      s << indent << "  svid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.svid[i]);
    }
    s << indent << "used[]" << std::endl;
    for (size_t i = 0; i < v.used.size(); ++i)
    {
      s << indent << "  used[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.used[i]);
    }
    s << indent << "elevation[]" << std::endl;
    for (size_t i = 0; i < v.elevation.size(); ++i)
    {
      s << indent << "  elevation[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.elevation[i]);
    }
    s << indent << "azimuth[]" << std::endl;
    for (size_t i = 0; i < v.azimuth.size(); ++i)
    {
      s << indent << "  azimuth[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.azimuth[i]);
    }
    s << indent << "snr[]" << std::endl;
    for (size_t i = 0; i < v.snr.size(); ++i)
    {
      s << indent << "  snr[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.snr[i]);
    }
    s << indent << "SAT_INFO_MAX_SATELLITES: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SAT_INFO_MAX_SATELLITES);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_SATINFO_H
