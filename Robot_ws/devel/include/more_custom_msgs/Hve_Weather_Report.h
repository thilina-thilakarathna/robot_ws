// Generated by gencpp from file more_custom_msgs/Hve_Weather_Report.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_HVE_WEATHER_REPORT_H
#define MORE_CUSTOM_MSGS_MESSAGE_HVE_WEATHER_REPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <more_custom_msgs/Hve_Weather_Query.h>
#include <more_custom_msgs/Hve_Weather_Query.h>

namespace more_custom_msgs
{
template <class ContainerAllocator>
struct Hve_Weather_Report_
{
  typedef Hve_Weather_Report_<ContainerAllocator> Type;

  Hve_Weather_Report_()
    : header()
    , sources()
    , report()  {
    }
  Hve_Weather_Report_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sources(_alloc)
    , report(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >::other >  _sources_type;
  _sources_type sources;

   typedef  ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator>  _report_type;
  _report_type report;





  typedef boost::shared_ptr< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> const> ConstPtr;

}; // struct Hve_Weather_Report_

typedef ::more_custom_msgs::Hve_Weather_Report_<std::allocator<void> > Hve_Weather_Report;

typedef boost::shared_ptr< ::more_custom_msgs::Hve_Weather_Report > Hve_Weather_ReportPtr;
typedef boost::shared_ptr< ::more_custom_msgs::Hve_Weather_Report const> Hve_Weather_ReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7860c5d07f1405906687faa2f7943979";
  }

  static const char* value(const ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7860c5d07f140590ULL;
  static const uint64_t static_value2 = 0x6687faa2f7943979ULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/Hve_Weather_Report";
  }

  static const char* value(const ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header     header\n\
Hve_Weather_Query[] sources\n\
Hve_Weather_Query   report\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: more_custom_msgs/Hve_Weather_Query\n\
std_msgs/Header header\n\
string          source\n\
string          condition\n\
float32         temperature\n\
string          temperatureUnits\n\
float32         pressure\n\
string          pressureUnits\n\
string          pressureTendency\n\
float32         humidity\n\
float32         windSpeed\n\
string          windSpeedUnits\n\
float32         windDirection\n\
float32         windGust\n\
string          windGustUnits\n\
float32         windGustDirection\n\
float32         precipitation_past1hr\n\
float32         precipitation_past3hr\n\
float32         precipitation_past6hr\n\
float32         precipitation_past9hr\n\
float32         precipitation_past12hr\n\
float32         precipitation_past24hr\n\
float32         UVIndex\n\
float32         visibility\n\
float32         dewPoint\n\
string          dewPointUnits\n\
float32         sunrise\n\
float32         sunset\n\
";
  }

  static const char* value(const ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sources);
      stream.next(m.report);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hve_Weather_Report_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::Hve_Weather_Report_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sources[]" << std::endl;
    for (size_t i = 0; i < v.sources.size(); ++i)
    {
      s << indent << "  sources[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >::stream(s, indent + "    ", v.sources[i]);
    }
    s << indent << "report: ";
    s << std::endl;
    Printer< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >::stream(s, indent + "  ", v.report);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_HVE_WEATHER_REPORT_H
