// Generated by gencpp from file more_custom_msgs/GPSPosition.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_GPSPOSITION_H
#define MORE_CUSTOM_MSGS_MESSAGE_GPSPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace more_custom_msgs
{
template <class ContainerAllocator>
struct GPSPosition_
{
  typedef GPSPosition_<ContainerAllocator> Type;

  GPSPosition_()
    : header()
    , time_utc_usec(0)
    , lat(0.0)
    , lon(0.0)
    , alt(0.0)
    , alt_ellipsoid(0.0)
    , s_variance_m_s(0.0)
    , c_variance_rad(0.0)
    , eph(0.0)
    , epv(0.0)
    , hdop(0.0)
    , vdop(0.0)
    , noise_per_ms(0)
    , jamming_indicator(0)
    , vel_m_s(0.0)
    , vel_n_m_s(0.0)
    , vel_e_m_s(0.0)
    , vel_d_m_s(0.0)
    , cog_rad(0.0)
    , timestamp_time_relative(0)
    , fix_type(0)
    , vel_ned_valid(false)
    , satellites_used(0)  {
    }
  GPSPosition_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_utc_usec(0)
    , lat(0.0)
    , lon(0.0)
    , alt(0.0)
    , alt_ellipsoid(0.0)
    , s_variance_m_s(0.0)
    , c_variance_rad(0.0)
    , eph(0.0)
    , epv(0.0)
    , hdop(0.0)
    , vdop(0.0)
    , noise_per_ms(0)
    , jamming_indicator(0)
    , vel_m_s(0.0)
    , vel_n_m_s(0.0)
    , vel_e_m_s(0.0)
    , vel_d_m_s(0.0)
    , cog_rad(0.0)
    , timestamp_time_relative(0)
    , fix_type(0)
    , vel_ned_valid(false)
    , satellites_used(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _time_utc_usec_type;
  _time_utc_usec_type time_utc_usec;

   typedef float _lat_type;
  _lat_type lat;

   typedef float _lon_type;
  _lon_type lon;

   typedef float _alt_type;
  _alt_type alt;

   typedef float _alt_ellipsoid_type;
  _alt_ellipsoid_type alt_ellipsoid;

   typedef float _s_variance_m_s_type;
  _s_variance_m_s_type s_variance_m_s;

   typedef float _c_variance_rad_type;
  _c_variance_rad_type c_variance_rad;

   typedef float _eph_type;
  _eph_type eph;

   typedef float _epv_type;
  _epv_type epv;

   typedef float _hdop_type;
  _hdop_type hdop;

   typedef float _vdop_type;
  _vdop_type vdop;

   typedef int32_t _noise_per_ms_type;
  _noise_per_ms_type noise_per_ms;

   typedef int32_t _jamming_indicator_type;
  _jamming_indicator_type jamming_indicator;

   typedef float _vel_m_s_type;
  _vel_m_s_type vel_m_s;

   typedef float _vel_n_m_s_type;
  _vel_n_m_s_type vel_n_m_s;

   typedef float _vel_e_m_s_type;
  _vel_e_m_s_type vel_e_m_s;

   typedef float _vel_d_m_s_type;
  _vel_d_m_s_type vel_d_m_s;

   typedef float _cog_rad_type;
  _cog_rad_type cog_rad;

   typedef int32_t _timestamp_time_relative_type;
  _timestamp_time_relative_type timestamp_time_relative;

   typedef uint8_t _fix_type_type;
  _fix_type_type fix_type;

   typedef uint8_t _vel_ned_valid_type;
  _vel_ned_valid_type vel_ned_valid;

   typedef uint8_t _satellites_used_type;
  _satellites_used_type satellites_used;





  typedef boost::shared_ptr< ::more_custom_msgs::GPSPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::GPSPosition_<ContainerAllocator> const> ConstPtr;

}; // struct GPSPosition_

typedef ::more_custom_msgs::GPSPosition_<std::allocator<void> > GPSPosition;

typedef boost::shared_ptr< ::more_custom_msgs::GPSPosition > GPSPositionPtr;
typedef boost::shared_ptr< ::more_custom_msgs::GPSPosition const> GPSPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::GPSPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::GPSPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::GPSPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::GPSPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::GPSPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::GPSPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::GPSPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::GPSPosition_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::GPSPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2945c1357dd0a2c87b09237acfceb0f2";
  }

  static const char* value(const ::more_custom_msgs::GPSPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2945c1357dd0a2c8ULL;
  static const uint64_t static_value2 = 0x7b09237acfceb0f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::GPSPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/GPSPosition";
  }

  static const char* value(const ::more_custom_msgs::GPSPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::GPSPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint64 time_utc_usec\n\
float32 lat\n\
float32 lon\n\
float32 alt\n\
float32 alt_ellipsoid\n\
float32 s_variance_m_s\n\
float32 c_variance_rad\n\
float32 eph\n\
float32 epv\n\
float32 hdop\n\
float32 vdop\n\
int32 noise_per_ms\n\
int32 jamming_indicator\n\
float32 vel_m_s\n\
float32 vel_n_m_s\n\
float32 vel_e_m_s\n\
float32 vel_d_m_s\n\
float32 cog_rad\n\
int32 timestamp_time_relative\n\
uint8 fix_type\n\
bool vel_ned_valid\n\
uint8 satellites_used\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::more_custom_msgs::GPSPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::GPSPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_utc_usec);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.alt);
      stream.next(m.alt_ellipsoid);
      stream.next(m.s_variance_m_s);
      stream.next(m.c_variance_rad);
      stream.next(m.eph);
      stream.next(m.epv);
      stream.next(m.hdop);
      stream.next(m.vdop);
      stream.next(m.noise_per_ms);
      stream.next(m.jamming_indicator);
      stream.next(m.vel_m_s);
      stream.next(m.vel_n_m_s);
      stream.next(m.vel_e_m_s);
      stream.next(m.vel_d_m_s);
      stream.next(m.cog_rad);
      stream.next(m.timestamp_time_relative);
      stream.next(m.fix_type);
      stream.next(m.vel_ned_valid);
      stream.next(m.satellites_used);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPSPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::GPSPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::GPSPosition_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_utc_usec: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_utc_usec);
    s << indent << "lat: ";
    Printer<float>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<float>::stream(s, indent + "  ", v.lon);
    s << indent << "alt: ";
    Printer<float>::stream(s, indent + "  ", v.alt);
    s << indent << "alt_ellipsoid: ";
    Printer<float>::stream(s, indent + "  ", v.alt_ellipsoid);
    s << indent << "s_variance_m_s: ";
    Printer<float>::stream(s, indent + "  ", v.s_variance_m_s);
    s << indent << "c_variance_rad: ";
    Printer<float>::stream(s, indent + "  ", v.c_variance_rad);
    s << indent << "eph: ";
    Printer<float>::stream(s, indent + "  ", v.eph);
    s << indent << "epv: ";
    Printer<float>::stream(s, indent + "  ", v.epv);
    s << indent << "hdop: ";
    Printer<float>::stream(s, indent + "  ", v.hdop);
    s << indent << "vdop: ";
    Printer<float>::stream(s, indent + "  ", v.vdop);
    s << indent << "noise_per_ms: ";
    Printer<int32_t>::stream(s, indent + "  ", v.noise_per_ms);
    s << indent << "jamming_indicator: ";
    Printer<int32_t>::stream(s, indent + "  ", v.jamming_indicator);
    s << indent << "vel_m_s: ";
    Printer<float>::stream(s, indent + "  ", v.vel_m_s);
    s << indent << "vel_n_m_s: ";
    Printer<float>::stream(s, indent + "  ", v.vel_n_m_s);
    s << indent << "vel_e_m_s: ";
    Printer<float>::stream(s, indent + "  ", v.vel_e_m_s);
    s << indent << "vel_d_m_s: ";
    Printer<float>::stream(s, indent + "  ", v.vel_d_m_s);
    s << indent << "cog_rad: ";
    Printer<float>::stream(s, indent + "  ", v.cog_rad);
    s << indent << "timestamp_time_relative: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_time_relative);
    s << indent << "fix_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix_type);
    s << indent << "vel_ned_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vel_ned_valid);
    s << indent << "satellites_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.satellites_used);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_GPSPOSITION_H
