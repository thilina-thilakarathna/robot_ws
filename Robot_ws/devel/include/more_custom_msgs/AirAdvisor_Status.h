// Generated by gencpp from file more_custom_msgs/AirAdvisor_Status.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_AIRADVISOR_STATUS_H
#define MORE_CUSTOM_MSGS_MESSAGE_AIRADVISOR_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <more_custom_msgs/AirAdvisor_Advisor.h>

namespace more_custom_msgs
{
template <class ContainerAllocator>
struct AirAdvisor_Status_
{
  typedef AirAdvisor_Status_<ContainerAllocator> Type;

  AirAdvisor_Status_()
    : header()
    , max_safe_distance(0)
    , advisory_color()
    , advisories()  {
    }
  AirAdvisor_Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , max_safe_distance(0)
    , advisory_color(_alloc)
    , advisories(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _max_safe_distance_type;
  _max_safe_distance_type max_safe_distance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _advisory_color_type;
  _advisory_color_type advisory_color;

   typedef std::vector< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >::other >  _advisories_type;
  _advisories_type advisories;





  typedef boost::shared_ptr< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> const> ConstPtr;

}; // struct AirAdvisor_Status_

typedef ::more_custom_msgs::AirAdvisor_Status_<std::allocator<void> > AirAdvisor_Status;

typedef boost::shared_ptr< ::more_custom_msgs::AirAdvisor_Status > AirAdvisor_StatusPtr;
typedef boost::shared_ptr< ::more_custom_msgs::AirAdvisor_Status const> AirAdvisor_StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d303c408187eafeac8aba4133ed8a9e";
  }

  static const char* value(const ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d303c408187eafeULL;
  static const uint64_t static_value2 = 0xac8aba4133ed8a9eULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/AirAdvisor_Status";
  }

  static const char* value(const ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
int32   max_safe_distance\n\
string  advisory_color\n\
AirAdvisor_Advisor[] advisories\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: more_custom_msgs/AirAdvisor_Advisor\n\
string  id\n\
string  name\n\
string  last_updated\n\
float32 latitude\n\
float32 longitude\n\
float32 distance\n\
string  type\n\
string  city\n\
string  state\n\
string  country\n\
string  properties_json\n\
string  color\n\
string  requirements\n\
";
  }

  static const char* value(const ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.max_safe_distance);
      stream.next(m.advisory_color);
      stream.next(m.advisories);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AirAdvisor_Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::AirAdvisor_Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "max_safe_distance: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_safe_distance);
    s << indent << "advisory_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.advisory_color);
    s << indent << "advisories[]" << std::endl;
    for (size_t i = 0; i < v.advisories.size(); ++i)
    {
      s << indent << "  advisories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::more_custom_msgs::AirAdvisor_Advisor_<ContainerAllocator> >::stream(s, indent + "    ", v.advisories[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_AIRADVISOR_STATUS_H
