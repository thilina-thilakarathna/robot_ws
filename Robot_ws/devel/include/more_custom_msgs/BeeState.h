// Generated by gencpp from file more_custom_msgs/BeeState.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_BEESTATE_H
#define MORE_CUSTOM_MSGS_MESSAGE_BEESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace more_custom_msgs
{
template <class ContainerAllocator>
struct BeeState_
{
  typedef BeeState_<ContainerAllocator> Type;

  BeeState_()
    : header()
    , state(0)  {
    }
  BeeState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _state_type;
  _state_type state;



  enum {
    IN_HIVE_CHARGING = 1u,
    IN_HIVE_CHARGED = 2u,
    LANDED_OUTSIDE = 3u,
    ON_MISSION = 4u,
    PAUSED = 5u,
    RETURNING = 6u,
    RETURNING_FALLBACK = 7u,
    TAKING_OFF = 8u,
    LANDING = 9u,
    LANDING_FALLBACK = 10u,
    KILLED = 11u,
    COMMUNICATION_LOST = 12u,
    CALIBRATING = 13u,
    ERROR = 14u,
  };


  typedef boost::shared_ptr< ::more_custom_msgs::BeeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::BeeState_<ContainerAllocator> const> ConstPtr;

}; // struct BeeState_

typedef ::more_custom_msgs::BeeState_<std::allocator<void> > BeeState;

typedef boost::shared_ptr< ::more_custom_msgs::BeeState > BeeStatePtr;
typedef boost::shared_ptr< ::more_custom_msgs::BeeState const> BeeStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::BeeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::BeeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::BeeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::BeeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::BeeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::BeeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::BeeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::BeeState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::BeeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae90783fc7d963cb09b2b9c106111fbf";
  }

  static const char* value(const ::more_custom_msgs::BeeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae90783fc7d963cbULL;
  static const uint64_t static_value2 = 0x09b2b9c106111fbfULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::BeeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/BeeState";
  }

  static const char* value(const ::more_custom_msgs::BeeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::BeeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
# The high-level states that the Bee can be in\n\
uint8 IN_HIVE_CHARGING = 1\n\
uint8 IN_HIVE_CHARGED = 2\n\
uint8 LANDED_OUTSIDE = 3\n\
uint8 ON_MISSION = 4\n\
uint8 PAUSED = 5\n\
uint8 RETURNING = 6\n\
uint8 RETURNING_FALLBACK = 7\n\
uint8 TAKING_OFF = 8\n\
uint8 LANDING = 9\n\
uint8 LANDING_FALLBACK = 10\n\
uint8 KILLED = 11\n\
uint8 COMMUNICATION_LOST = 12\n\
uint8 CALIBRATING = 13\n\
uint8 ERROR = 14\n\
\n\
uint8 state\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::more_custom_msgs::BeeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::BeeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BeeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::BeeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::BeeState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_BEESTATE_H
