// Generated by gencpp from file more_custom_msgs/Hve_Weather_Query.msg
// DO NOT EDIT!


#ifndef MORE_CUSTOM_MSGS_MESSAGE_HVE_WEATHER_QUERY_H
#define MORE_CUSTOM_MSGS_MESSAGE_HVE_WEATHER_QUERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace more_custom_msgs
{
template <class ContainerAllocator>
struct Hve_Weather_Query_
{
  typedef Hve_Weather_Query_<ContainerAllocator> Type;

  Hve_Weather_Query_()
    : header()
    , source()
    , condition()
    , temperature(0.0)
    , temperatureUnits()
    , pressure(0.0)
    , pressureUnits()
    , pressureTendency()
    , humidity(0.0)
    , windSpeed(0.0)
    , windSpeedUnits()
    , windDirection(0.0)
    , windGust(0.0)
    , windGustUnits()
    , windGustDirection(0.0)
    , precipitation_past1hr(0.0)
    , precipitation_past3hr(0.0)
    , precipitation_past6hr(0.0)
    , precipitation_past9hr(0.0)
    , precipitation_past12hr(0.0)
    , precipitation_past24hr(0.0)
    , UVIndex(0.0)
    , visibility(0.0)
    , dewPoint(0.0)
    , dewPointUnits()
    , sunrise(0.0)
    , sunset(0.0)  {
    }
  Hve_Weather_Query_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , source(_alloc)
    , condition(_alloc)
    , temperature(0.0)
    , temperatureUnits(_alloc)
    , pressure(0.0)
    , pressureUnits(_alloc)
    , pressureTendency(_alloc)
    , humidity(0.0)
    , windSpeed(0.0)
    , windSpeedUnits(_alloc)
    , windDirection(0.0)
    , windGust(0.0)
    , windGustUnits(_alloc)
    , windGustDirection(0.0)
    , precipitation_past1hr(0.0)
    , precipitation_past3hr(0.0)
    , precipitation_past6hr(0.0)
    , precipitation_past9hr(0.0)
    , precipitation_past12hr(0.0)
    , precipitation_past24hr(0.0)
    , UVIndex(0.0)
    , visibility(0.0)
    , dewPoint(0.0)
    , dewPointUnits(_alloc)
    , sunrise(0.0)
    , sunset(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _condition_type;
  _condition_type condition;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _temperatureUnits_type;
  _temperatureUnits_type temperatureUnits;

   typedef float _pressure_type;
  _pressure_type pressure;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pressureUnits_type;
  _pressureUnits_type pressureUnits;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pressureTendency_type;
  _pressureTendency_type pressureTendency;

   typedef float _humidity_type;
  _humidity_type humidity;

   typedef float _windSpeed_type;
  _windSpeed_type windSpeed;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _windSpeedUnits_type;
  _windSpeedUnits_type windSpeedUnits;

   typedef float _windDirection_type;
  _windDirection_type windDirection;

   typedef float _windGust_type;
  _windGust_type windGust;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _windGustUnits_type;
  _windGustUnits_type windGustUnits;

   typedef float _windGustDirection_type;
  _windGustDirection_type windGustDirection;

   typedef float _precipitation_past1hr_type;
  _precipitation_past1hr_type precipitation_past1hr;

   typedef float _precipitation_past3hr_type;
  _precipitation_past3hr_type precipitation_past3hr;

   typedef float _precipitation_past6hr_type;
  _precipitation_past6hr_type precipitation_past6hr;

   typedef float _precipitation_past9hr_type;
  _precipitation_past9hr_type precipitation_past9hr;

   typedef float _precipitation_past12hr_type;
  _precipitation_past12hr_type precipitation_past12hr;

   typedef float _precipitation_past24hr_type;
  _precipitation_past24hr_type precipitation_past24hr;

   typedef float _UVIndex_type;
  _UVIndex_type UVIndex;

   typedef float _visibility_type;
  _visibility_type visibility;

   typedef float _dewPoint_type;
  _dewPoint_type dewPoint;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dewPointUnits_type;
  _dewPointUnits_type dewPointUnits;

   typedef float _sunrise_type;
  _sunrise_type sunrise;

   typedef float _sunset_type;
  _sunset_type sunset;





  typedef boost::shared_ptr< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> const> ConstPtr;

}; // struct Hve_Weather_Query_

typedef ::more_custom_msgs::Hve_Weather_Query_<std::allocator<void> > Hve_Weather_Query;

typedef boost::shared_ptr< ::more_custom_msgs::Hve_Weather_Query > Hve_Weather_QueryPtr;
typedef boost::shared_ptr< ::more_custom_msgs::Hve_Weather_Query const> Hve_Weather_QueryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace more_custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'more_custom_msgs': ['/home/thilina/development/robot_ws/Robot_ws/src/more_custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37954a75c1e39a404d053ef09df10fb2";
  }

  static const char* value(const ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37954a75c1e39a40ULL;
  static const uint64_t static_value2 = 0x4d053ef09df10fb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "more_custom_msgs/Hve_Weather_Query";
  }

  static const char* value(const ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
string          source\n\
string          condition\n\
float32         temperature\n\
string          temperatureUnits\n\
float32         pressure\n\
string          pressureUnits\n\
string          pressureTendency\n\
float32         humidity\n\
float32         windSpeed\n\
string          windSpeedUnits\n\
float32         windDirection\n\
float32         windGust\n\
string          windGustUnits\n\
float32         windGustDirection\n\
float32         precipitation_past1hr\n\
float32         precipitation_past3hr\n\
float32         precipitation_past6hr\n\
float32         precipitation_past9hr\n\
float32         precipitation_past12hr\n\
float32         precipitation_past24hr\n\
float32         UVIndex\n\
float32         visibility\n\
float32         dewPoint\n\
string          dewPointUnits\n\
float32         sunrise\n\
float32         sunset\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.source);
      stream.next(m.condition);
      stream.next(m.temperature);
      stream.next(m.temperatureUnits);
      stream.next(m.pressure);
      stream.next(m.pressureUnits);
      stream.next(m.pressureTendency);
      stream.next(m.humidity);
      stream.next(m.windSpeed);
      stream.next(m.windSpeedUnits);
      stream.next(m.windDirection);
      stream.next(m.windGust);
      stream.next(m.windGustUnits);
      stream.next(m.windGustDirection);
      stream.next(m.precipitation_past1hr);
      stream.next(m.precipitation_past3hr);
      stream.next(m.precipitation_past6hr);
      stream.next(m.precipitation_past9hr);
      stream.next(m.precipitation_past12hr);
      stream.next(m.precipitation_past24hr);
      stream.next(m.UVIndex);
      stream.next(m.visibility);
      stream.next(m.dewPoint);
      stream.next(m.dewPointUnits);
      stream.next(m.sunrise);
      stream.next(m.sunset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hve_Weather_Query_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::more_custom_msgs::Hve_Weather_Query_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "condition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.condition);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "temperatureUnits: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.temperatureUnits);
    s << indent << "pressure: ";
    Printer<float>::stream(s, indent + "  ", v.pressure);
    s << indent << "pressureUnits: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pressureUnits);
    s << indent << "pressureTendency: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pressureTendency);
    s << indent << "humidity: ";
    Printer<float>::stream(s, indent + "  ", v.humidity);
    s << indent << "windSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.windSpeed);
    s << indent << "windSpeedUnits: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.windSpeedUnits);
    s << indent << "windDirection: ";
    Printer<float>::stream(s, indent + "  ", v.windDirection);
    s << indent << "windGust: ";
    Printer<float>::stream(s, indent + "  ", v.windGust);
    s << indent << "windGustUnits: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.windGustUnits);
    s << indent << "windGustDirection: ";
    Printer<float>::stream(s, indent + "  ", v.windGustDirection);
    s << indent << "precipitation_past1hr: ";
    Printer<float>::stream(s, indent + "  ", v.precipitation_past1hr);
    s << indent << "precipitation_past3hr: ";
    Printer<float>::stream(s, indent + "  ", v.precipitation_past3hr);
    s << indent << "precipitation_past6hr: ";
    Printer<float>::stream(s, indent + "  ", v.precipitation_past6hr);
    s << indent << "precipitation_past9hr: ";
    Printer<float>::stream(s, indent + "  ", v.precipitation_past9hr);
    s << indent << "precipitation_past12hr: ";
    Printer<float>::stream(s, indent + "  ", v.precipitation_past12hr);
    s << indent << "precipitation_past24hr: ";
    Printer<float>::stream(s, indent + "  ", v.precipitation_past24hr);
    s << indent << "UVIndex: ";
    Printer<float>::stream(s, indent + "  ", v.UVIndex);
    s << indent << "visibility: ";
    Printer<float>::stream(s, indent + "  ", v.visibility);
    s << indent << "dewPoint: ";
    Printer<float>::stream(s, indent + "  ", v.dewPoint);
    s << indent << "dewPointUnits: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dewPointUnits);
    s << indent << "sunrise: ";
    Printer<float>::stream(s, indent + "  ", v.sunrise);
    s << indent << "sunset: ";
    Printer<float>::stream(s, indent + "  ", v.sunset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORE_CUSTOM_MSGS_MESSAGE_HVE_WEATHER_QUERY_H
