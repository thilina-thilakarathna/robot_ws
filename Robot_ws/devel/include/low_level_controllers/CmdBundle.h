// Generated by gencpp from file low_level_controllers/CmdBundle.msg
// DO NOT EDIT!


#ifndef LOW_LEVEL_CONTROLLERS_MESSAGE_CMDBUNDLE_H
#define LOW_LEVEL_CONTROLLERS_MESSAGE_CMDBUNDLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace low_level_controllers
{
template <class ContainerAllocator>
struct CmdBundle_
{
  typedef CmdBundle_<ContainerAllocator> Type;

  CmdBundle_()
    : servo1_ang(0.0)
    , servo2_ang(0.0)
    , servo3_ang(0.0)
    , servo4_ang(0.0)
    , servo5_ang(0.0)
    , servo6_ang(0.0)
    , wheel1_ang(0.0)
    , wheel1_vel(0.0)
    , wheel2_ang(0.0)
    , wheel2_vel(0.0)
    , wheel3_ang(0.0)
    , wheel3_vel(0.0)  {
    }
  CmdBundle_(const ContainerAllocator& _alloc)
    : servo1_ang(0.0)
    , servo2_ang(0.0)
    , servo3_ang(0.0)
    , servo4_ang(0.0)
    , servo5_ang(0.0)
    , servo6_ang(0.0)
    , wheel1_ang(0.0)
    , wheel1_vel(0.0)
    , wheel2_ang(0.0)
    , wheel2_vel(0.0)
    , wheel3_ang(0.0)
    , wheel3_vel(0.0)  {
  (void)_alloc;
    }



   typedef float _servo1_ang_type;
  _servo1_ang_type servo1_ang;

   typedef float _servo2_ang_type;
  _servo2_ang_type servo2_ang;

   typedef float _servo3_ang_type;
  _servo3_ang_type servo3_ang;

   typedef float _servo4_ang_type;
  _servo4_ang_type servo4_ang;

   typedef float _servo5_ang_type;
  _servo5_ang_type servo5_ang;

   typedef float _servo6_ang_type;
  _servo6_ang_type servo6_ang;

   typedef float _wheel1_ang_type;
  _wheel1_ang_type wheel1_ang;

   typedef float _wheel1_vel_type;
  _wheel1_vel_type wheel1_vel;

   typedef float _wheel2_ang_type;
  _wheel2_ang_type wheel2_ang;

   typedef float _wheel2_vel_type;
  _wheel2_vel_type wheel2_vel;

   typedef float _wheel3_ang_type;
  _wheel3_ang_type wheel3_ang;

   typedef float _wheel3_vel_type;
  _wheel3_vel_type wheel3_vel;





  typedef boost::shared_ptr< ::low_level_controllers::CmdBundle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::low_level_controllers::CmdBundle_<ContainerAllocator> const> ConstPtr;

}; // struct CmdBundle_

typedef ::low_level_controllers::CmdBundle_<std::allocator<void> > CmdBundle;

typedef boost::shared_ptr< ::low_level_controllers::CmdBundle > CmdBundlePtr;
typedef boost::shared_ptr< ::low_level_controllers::CmdBundle const> CmdBundleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::low_level_controllers::CmdBundle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::low_level_controllers::CmdBundle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace low_level_controllers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'low_level_controllers': ['/home/thilina/development/robot_ws/Robot_ws/src/low_level_controllers/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::low_level_controllers::CmdBundle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::low_level_controllers::CmdBundle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::low_level_controllers::CmdBundle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::low_level_controllers::CmdBundle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::low_level_controllers::CmdBundle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::low_level_controllers::CmdBundle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::low_level_controllers::CmdBundle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33dbfa38363ed7f43720a30f635f98c2";
  }

  static const char* value(const ::low_level_controllers::CmdBundle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33dbfa38363ed7f4ULL;
  static const uint64_t static_value2 = 0x3720a30f635f98c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::low_level_controllers::CmdBundle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "low_level_controllers/CmdBundle";
  }

  static const char* value(const ::low_level_controllers::CmdBundle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::low_level_controllers::CmdBundle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 servo1_ang\n\
float32 servo2_ang\n\
float32 servo3_ang\n\
float32 servo4_ang\n\
float32 servo5_ang\n\
float32 servo6_ang\n\
float32 wheel1_ang\n\
float32 wheel1_vel\n\
float32 wheel2_ang\n\
float32 wheel2_vel\n\
float32 wheel3_ang\n\
float32 wheel3_vel\n\
";
  }

  static const char* value(const ::low_level_controllers::CmdBundle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::low_level_controllers::CmdBundle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo1_ang);
      stream.next(m.servo2_ang);
      stream.next(m.servo3_ang);
      stream.next(m.servo4_ang);
      stream.next(m.servo5_ang);
      stream.next(m.servo6_ang);
      stream.next(m.wheel1_ang);
      stream.next(m.wheel1_vel);
      stream.next(m.wheel2_ang);
      stream.next(m.wheel2_vel);
      stream.next(m.wheel3_ang);
      stream.next(m.wheel3_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CmdBundle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::low_level_controllers::CmdBundle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::low_level_controllers::CmdBundle_<ContainerAllocator>& v)
  {
    s << indent << "servo1_ang: ";
    Printer<float>::stream(s, indent + "  ", v.servo1_ang);
    s << indent << "servo2_ang: ";
    Printer<float>::stream(s, indent + "  ", v.servo2_ang);
    s << indent << "servo3_ang: ";
    Printer<float>::stream(s, indent + "  ", v.servo3_ang);
    s << indent << "servo4_ang: ";
    Printer<float>::stream(s, indent + "  ", v.servo4_ang);
    s << indent << "servo5_ang: ";
    Printer<float>::stream(s, indent + "  ", v.servo5_ang);
    s << indent << "servo6_ang: ";
    Printer<float>::stream(s, indent + "  ", v.servo6_ang);
    s << indent << "wheel1_ang: ";
    Printer<float>::stream(s, indent + "  ", v.wheel1_ang);
    s << indent << "wheel1_vel: ";
    Printer<float>::stream(s, indent + "  ", v.wheel1_vel);
    s << indent << "wheel2_ang: ";
    Printer<float>::stream(s, indent + "  ", v.wheel2_ang);
    s << indent << "wheel2_vel: ";
    Printer<float>::stream(s, indent + "  ", v.wheel2_vel);
    s << indent << "wheel3_ang: ";
    Printer<float>::stream(s, indent + "  ", v.wheel3_ang);
    s << indent << "wheel3_vel: ";
    Printer<float>::stream(s, indent + "  ", v.wheel3_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOW_LEVEL_CONTROLLERS_MESSAGE_CMDBUNDLE_H
